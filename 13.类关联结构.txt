1、

# coding : UTF-8
class Member:
    def __init__(self, **kwargs):       # 可以随意编写很多的属性内容
        self.__name = kwargs.get("name")
        self.__age = kwargs.get("age")
    def get_info(self):
        return "【Member类】姓名：%s、年龄：%s" % (self.__name, self.__age)
    # setter、getter方法、略...
    def set_car(self, car):         # 设置人与车的关联
        self.__car = car
    def get_car(self):
        return self.__car       # 获取人对应车的信息
class Car:
    def __init__(self, **kwargs):
        self.__brand = kwargs.get("brand")
        self.__price = kwargs.get("price")
    def set_member(self, member):   # 车和人的关系
        self.__member = member
    def get_member(self):
        return self.__member
    def get_info(self):
        return "【Car类】品牌：%s、价格：%s" % (self.__brand, self.__price)
    # setter、getter方法、略...
def main():
    # 第一步：各自实例化对象
    mem = Member(name="陈浩东", age=50)            # 独立类对象
    car = Car(brand="奔驰G50",price=1580000.00)   # 独立类对象
    # 第二步：根据对象引用关系设置关联
    mem.set_car(car)        # 一个人设置对应的汽车关联
    car.set_member(mem) # 一辆车对应的人的信息关联
    # 第三步：根据关联关系获取相应的内容
    print(mem.get_car().get_info())     # 通过人的信息找到车的信息
    print(car.get_member().get_info())  # 通过车的信息获取人的信息
if __name__ == "__main__":
    main()

2、
# coding : UTF-8
class Member:
    def __init__(self, **kwargs):       # 可以随意编写很多的属性内容
        self.__name = kwargs.get("name")
        self.__age = kwargs.get("age")
        self.__children = []        # 表示一个人的全部后代，通过一个列表来描述
    def get_children(self):     # 获取全部的后代信息
        return self.__children
    def get_info(self):
        return "【Member类】姓名：%s、年龄：%s" % (self.__name, self.__age)
    # setter、getter方法、略...
    def set_car(self, car):         # 设置人与车的关联
        self.__car = car
    def get_car(self):
        return self.__car       # 获取人对应车的信息
class Car:
    def __init__(self, **kwargs):
        self.__brand = kwargs.get("brand")
        self.__price = kwargs.get("price")
    def set_member(self, member):   # 车和人的关系
        self.__member = member
    def get_member(self):
        return self.__member
    def get_info(self):
        return "【Car类】品牌：%s、价格：%s" % (self.__brand, self.__price)
    # setter、getter方法、略...
def main():
    # 第一步：各自实例化对象
    mem = Member(name="陈浩东", age=50)            # 独立类对象
    chd_a = Member(name = "于顺", age = 48)
    chd_b = Member(name="公孙夏丹", age = 38)       #
    car = Car(brand="奔驰G50",price=1580000.00)   # 独立类对象
    car_a = Car(brand="碰碰车",price=2800.00)   # 独立类对象
    car_b = Car(brand="公交车",price=1380000.00)
    # 第二步：根据对象引用关系设置关联
    mem.set_car(car)        # 一个人设置对应的汽车关联
    car.set_member(mem) # 一辆车对应的人的信息关联
    chd_a.set_car(car_a)
    chd_b.set_car(car_b)
    car_a.set_member(chd_a)
    car_b.set_member(chd_b)
    mem.get_children().append(chd_a)
    mem.get_children().append(chd_b)
    # 第三步：根据关联关系获取相应的内容
    print(mem.get_info())       # 得到父辈的基本信息
    print("\t|- %s" % mem.get_car().get_info())
    for child in mem.get_children():
        print(child.get_info())
        print("\t|- %s" % child.get_car().get_info())
if __name__ == "__main__":
    main()


3、
# coding : UTF-8
class Dept:
    def __init__(self, **kwargs):
        self.__dname = kwargs.get("dname")
        self.__loc = kwargs.get("loc")
        self.__emps = []            # 保存所有的雇员信息
    def get_emps(self):
        return self.__emps
    def get_info(self):
        return "【Dept类】部门名称：%s、部门位置：%s" % (self.__dname, self.__loc)
class Emp:
    def __init__(self, **kwargs):
        self.__ename = kwargs.get("ename")
        self.__sal = kwargs.get("sal")
    def set_dept(self, dept):
        self.__dept = dept
    def get_dept(self):
        return self.__dept
    def set_mgr(self, mgr):     # 设置雇员对应的领导信息
        self.__mgr = mgr
    def get_mgr(self):
        if "_Emp__mgr" in dir(self):    # 如果给定对象里面有mgr属性则返回
            return self.__mgr
        else:
            return None
    def get_info(self):
        return "【Emp类】雇员姓名：%s、雇员工资：%s" % (self.__ename, self.__sal)
def main():
    dept = Dept(dname="MLDN教学部", loc="北京")
    emp_a = Emp(ename="于顺", sal=35000.00)
    emp_b = Emp(ename="陈浩东", sal=8500.00)
    emp_c = Emp(ename="公孙夏丹", sal=7500.00)
    emp_a.set_dept(dept)        # 设置雇员和部门间的关系
    emp_b.set_dept(dept)        # 设置雇员和部门间的关系
    emp_c.set_dept(dept)        # 设置雇员和部门间的关系
    emp_b.set_mgr(emp_a)        # 设置领导关系
    emp_c.set_mgr(emp_b)        # 设置领导关系
    dept.get_emps().append(emp_a)   # 设置部门和员工关系
    dept.get_emps().append(emp_b)   # 设置部门和员工关系
    dept.get_emps().append(emp_c)   # 设置部门和员工关系
    print(dept.get_info())
    for emp in dept.get_emps():
        print("\t|- %s" % emp.get_info())
        if emp.get_mgr() != None:
            print("\t\t|- %s" % emp.get_mgr().get_info())
if __name__ == "__main__":
    main()


4、

# coding : UTF-8
class Blackboard:       # 黑板
    pass
class Map:      # 地图
    pass
class Platform:     # 讲台
    pass
class DesksAndChairs:       # 桌椅
    pass
class Classroom:    # 定义教室类
    def __init__(self):
        self.__platform = Platform()
        self.__board = Blackboard()
        self.__map = Map()
        self.__dc = []























